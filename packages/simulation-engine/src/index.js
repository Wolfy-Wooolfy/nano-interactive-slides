const clamp=n=>Number.isFinite(n)?n:0;function computeNext(state,dt,params){const s=JSON.parse(JSON.stringify(state));const rateFactory=clamp(params.factoryRate||0);const rateStore=clamp(params.storeRate||0);const capacityWarehouse=clamp(params.warehouseCapacity||0);const delayFW=clamp(params.delayFactoryToWarehouse||0);const delayWS=clamp(params.delayWarehouseToStore||0);const tick=dt/1000;const produce=rateFactory*tick;const consume=rateStore*tick;const canStore=Math.max(0,capacityWarehouse-s.stock.warehouse);const toWarehouse=Math.min(produce,canStore);s.stock.factory+=0;const pipeFW=Math.max(0,toWarehouse-delayFW>0?toWarehouse:0);s.stock.warehouse+=pipeFW;const fromWarehouse=Math.min(consume,s.stock.warehouse);const pipeWS=Math.max(0,fromWarehouse-delayWS>0?fromWarehouse:0);s.stock.warehouse-=pipeWS;const delivered=Math.min(pipeWS,consume);s.stock.store+=delivered;return s}export function createEngine(initialState,initialParams){let state=JSON.parse(JSON.stringify(initialState||{stock:{factory:0,warehouse:10,store:0}}));let params=Object.assign({tickMs:100,factoryRate:5,warehouseCapacity:50,storeRate:4,delayFactoryToWarehouse:2,delayWarehouseToStore:1,speed:1},initialParams||{});let timer=null;let lastTs=0;const listeners=new Set();function emit(){listeners.forEach(fn=>fn(getState()))}function start(){if(timer)return;lastTs=performance.now();timer=setInterval(()=>{const now=performance.now();const dt=(now-lastTs)*(params.speed||1);lastTs=now;state=computeNext(state,dt,params);emit()},Math.max(10,params.tickMs||100))}function stop(){if(timer){clearInterval(timer);timer=null}}function step(dt){const d=Math.max(1,dt||params.tickMs||100);state=computeNext(state,d,params);emit()}function setParams(next){params=Object.assign({},params,next||{});if(timer){clearInterval(timer);timer=setInterval(()=>{const now=performance.now();const dt=(now-lastTs)*(params.speed||1);lastTs=now;state=computeNext(state,dt,params);emit()},Math.max(10,params.tickMs||100))}}function onUpdate(fn){listeners.add(fn);return()=>listeners.delete(fn)}function getState(){return JSON.parse(JSON.stringify({state,params}))}function loadScenario(scn){if(!scn)return;const p=scn.params||{};const st=scn.initialStock||{};state={stock:{factory:clamp(st.factory||0),warehouse:clamp(st.warehouse||0),store:clamp(st.store||0)}};params=Object.assign({},params,{tickMs:clamp(p.tickMs||params.tickMs),factoryRate:clamp((scn.nodes||[]).find(x=>x.type==="producer")?.rate||params.factoryRate),warehouseCapacity:clamp((scn.nodes||[]).find(x=>x.type==="buffer")?.capacity||params.warehouseCapacity),storeRate:clamp((scn.nodes||[]).find(x=>x.type==="consumer")?.rate||params.storeRate),delayFactoryToWarehouse:clamp((scn.edges||[]).find(e=>e.from==="factory"&&e.to==="warehouse")?.delay||params.delayFactoryToWarehouse),delayWarehouseToStore:clamp((scn.edges||[]).find(e=>e.from==="warehouse"&&e.to==="store")?.delay||params.delayWarehouseToStore)});emit()}return{start,stop,step,setParams,onUpdate,getState,loadScenario}}
